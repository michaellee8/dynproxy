// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package echodispatch

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadEcho_dispatch returns the embedded CollectionSpec for echo_dispatch.
func loadEcho_dispatch() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Echo_dispatchBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load echo_dispatch: %w", err)
	}

	return spec, err
}

// loadEcho_dispatchObjects loads echo_dispatch and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *echo_dispatchObjects
//     *echo_dispatchPrograms
//     *echo_dispatchMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadEcho_dispatchObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadEcho_dispatch()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// echo_dispatchSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type echo_dispatchSpecs struct {
	echo_dispatchProgramSpecs
	echo_dispatchMapSpecs
}

// echo_dispatchSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type echo_dispatchProgramSpecs struct {
	EchoDispatch *ebpf.ProgramSpec `ebpf:"echo_dispatch"`
}

// echo_dispatchMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type echo_dispatchMapSpecs struct {
	EchoPorts  *ebpf.MapSpec `ebpf:"echo_ports"`
	EchoSocket *ebpf.MapSpec `ebpf:"echo_socket"`
}

// echo_dispatchObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadEcho_dispatchObjects or ebpf.CollectionSpec.LoadAndAssign.
type echo_dispatchObjects struct {
	echo_dispatchPrograms
	echo_dispatchMaps
}

func (o *echo_dispatchObjects) Close() error {
	return _Echo_dispatchClose(
		&o.echo_dispatchPrograms,
		&o.echo_dispatchMaps,
	)
}

// echo_dispatchMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadEcho_dispatchObjects or ebpf.CollectionSpec.LoadAndAssign.
type echo_dispatchMaps struct {
	EchoPorts  *ebpf.Map `ebpf:"echo_ports"`
	EchoSocket *ebpf.Map `ebpf:"echo_socket"`
}

func (m *echo_dispatchMaps) Close() error {
	return _Echo_dispatchClose(
		m.EchoPorts,
		m.EchoSocket,
	)
}

// echo_dispatchPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadEcho_dispatchObjects or ebpf.CollectionSpec.LoadAndAssign.
type echo_dispatchPrograms struct {
	EchoDispatch *ebpf.Program `ebpf:"echo_dispatch"`
}

func (p *echo_dispatchPrograms) Close() error {
	return _Echo_dispatchClose(
		p.EchoDispatch,
	)
}

func _Echo_dispatchClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed echo_dispatch_bpfeb.o
var _Echo_dispatchBytes []byte
